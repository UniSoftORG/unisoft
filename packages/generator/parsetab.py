
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programCOLON COMMA EQUALS GEN_CHILD GEN_ELEMENT GEN_END LBRACKET LCURLY LPAREN NUMBER RBRACKET RCURLY RPAREN STRING TEXT VARIABLEprogram : program gen_element\n               | gen_elementstatements : statements statement\n                  | statementgen_element : GEN_ELEMENT LPAREN gen_params RPAREN COLON statements children GEN_ENDgen_params : gen_params COMMA gen_param\n                  | gen_paramgen_param : TEXT COLON valuechildren : children child\n                | child\n                | child : GEN_CHILD LPAREN TEXT RPARENstatement : VARIABLE TEXT EQUALS itemitem : object\n            | list\n            | NUMBER\n            | STRINGobject : LCURLY keyvalues RCURLYlist : LBRACKET items RBRACKETitems : items COMMA item\n             | item\n             | keyvalues : keyvalues COMMA keyvalue\n                 | keyvalue\n                 | keyvalue : TEXT COLON valuevalue : STRING\n             | object\n             | NUMBER'
    
_lr_action_items = {'GEN_ELEMENT':([0,1,2,4,33,],[3,3,-2,-1,-5,]),'$end':([1,2,4,33,],[0,-2,-1,-5,]),'LPAREN':([3,28,],[5,35,]),'TEXT':([5,10,18,21,31,35,],[8,8,24,29,24,39,]),'RPAREN':([6,7,13,14,15,16,17,30,39,],[9,-7,-6,-8,-27,-28,-29,-18,46,]),'COMMA':([6,7,13,14,15,16,17,18,22,23,30,37,38,41,42,43,44,45,47,48,49,51,],[10,-7,-6,-8,-27,-28,-29,-25,31,-24,-18,-23,-26,-14,-15,-16,-17,-22,50,-21,-19,-20,]),'COLON':([8,9,24,],[11,12,32,]),'STRING':([11,32,36,45,50,],[15,15,44,44,44,]),'NUMBER':([11,32,36,45,50,],[17,17,43,43,43,]),'LCURLY':([11,32,36,45,50,],[18,18,18,18,18,]),'VARIABLE':([12,19,20,26,30,40,41,42,43,44,49,],[21,21,-4,-3,-18,-13,-14,-15,-16,-17,-19,]),'RCURLY':([15,16,17,18,22,23,30,37,38,],[-27,-28,-29,-25,30,-24,-18,-23,-26,]),'GEN_END':([19,20,25,26,27,30,34,40,41,42,43,44,46,49,],[-11,-4,33,-3,-10,-18,-9,-13,-14,-15,-16,-17,-12,-19,]),'GEN_CHILD':([19,20,25,26,27,30,34,40,41,42,43,44,46,49,],[28,-4,28,-3,-10,-18,-9,-13,-14,-15,-16,-17,-12,-19,]),'EQUALS':([29,],[36,]),'RBRACKET':([30,41,42,43,44,45,47,48,49,51,],[-18,-14,-15,-16,-17,-22,49,-21,-19,-20,]),'LBRACKET':([36,45,50,],[45,45,45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'gen_element':([0,1,],[2,4,]),'gen_params':([5,],[6,]),'gen_param':([5,10,],[7,13,]),'value':([11,32,],[14,38,]),'object':([11,32,36,45,50,],[16,16,41,41,41,]),'statements':([12,],[19,]),'statement':([12,19,],[20,26,]),'keyvalues':([18,],[22,]),'keyvalue':([18,31,],[23,37,]),'children':([19,],[25,]),'child':([19,25,],[27,34,]),'item':([36,45,50,],[40,48,51,]),'list':([36,45,50,],[42,42,42,]),'items':([45,],[47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program gen_element','program',2,'p_program','compiler.py',58),
  ('program -> gen_element','program',1,'p_program','compiler.py',59),
  ('statements -> statements statement','statements',2,'p_statements','compiler.py',66),
  ('statements -> statement','statements',1,'p_statements','compiler.py',67),
  ('gen_element -> GEN_ELEMENT LPAREN gen_params RPAREN COLON statements children GEN_END','gen_element',8,'p_gen_element','compiler.py',74),
  ('gen_params -> gen_params COMMA gen_param','gen_params',3,'p_gen_params','compiler.py',86),
  ('gen_params -> gen_param','gen_params',1,'p_gen_params','compiler.py',87),
  ('gen_param -> TEXT COLON value','gen_param',3,'p_gen_param','compiler.py',94),
  ('children -> children child','children',2,'p_children','compiler.py',98),
  ('children -> child','children',1,'p_children','compiler.py',99),
  ('children -> <empty>','children',0,'p_children','compiler.py',100),
  ('child -> GEN_CHILD LPAREN TEXT RPAREN','child',4,'p_child','compiler.py',109),
  ('statement -> VARIABLE TEXT EQUALS item','statement',4,'p_statement_variable','compiler.py',113),
  ('item -> object','item',1,'p_item','compiler.py',118),
  ('item -> list','item',1,'p_item','compiler.py',119),
  ('item -> NUMBER','item',1,'p_item','compiler.py',120),
  ('item -> STRING','item',1,'p_item','compiler.py',121),
  ('object -> LCURLY keyvalues RCURLY','object',3,'p_object','compiler.py',125),
  ('list -> LBRACKET items RBRACKET','list',3,'p_list','compiler.py',129),
  ('items -> items COMMA item','items',3,'p_items','compiler.py',133),
  ('items -> item','items',1,'p_items','compiler.py',134),
  ('items -> <empty>','items',0,'p_items','compiler.py',135),
  ('keyvalues -> keyvalues COMMA keyvalue','keyvalues',3,'p_keyvalues','compiler.py',144),
  ('keyvalues -> keyvalue','keyvalues',1,'p_keyvalues','compiler.py',145),
  ('keyvalues -> <empty>','keyvalues',0,'p_keyvalues','compiler.py',146),
  ('keyvalue -> TEXT COLON value','keyvalue',3,'p_keyvalue','compiler.py',155),
  ('value -> STRING','value',1,'p_value','compiler.py',159),
  ('value -> object','value',1,'p_value','compiler.py',160),
  ('value -> NUMBER','value',1,'p_value','compiler.py',161),
]
